/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dlpu.eva.struts.action;

import java.sql.Timestamp;

import hibernate.Notice;

import javax.persistence.Entity;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.dlpu.eva.service.NoticeService;
import com.dlpu.eva.struts.form.NoticeForm;
import com.dlpu.eva.time.GetSystemTime;

/**
 * MyEclipse Struts Creation date: 10-27-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
@Entity
public class NoticeupAction extends Action {
	/*
	 * Generated Methods
	 */
	private static final String SUCCESS = "success";
	private static final String ERROR = "error";
	private static final String DERROR = "dataerror";

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		Object s = request.getSession().getAttribute("adminuser");
		if (s == null) {// ��ֹ����
			return mapping.findForward(ERROR);
		}

		NoticeForm nf = (NoticeForm) form;

		NoticeService ns = new NoticeService();
		Notice n = new Notice();

		String getType = request.getParameter("type");
		if (getType == null) {
			return mapping.findForward(ERROR);
		}
		int type = Integer.parseInt(getType);

		// ��ȡ��ǰϵͳʱ��(��ȷ����)��Ϊ���ű��
		GetSystemTime gst = new GetSystemTime();
		String lt = gst.GetFullTimeSQLHelper();
		Timestamp tsTimestamp = gst.GetFullTimeStamp();

		n.setNoticeid(lt);
		n.setNoticetype(type);
		n.setNoticetitle(nf.getNoticetitle());
		n.setNoticecontent(nf.getMytext());
		n.setNoticetime(tsTimestamp);

		if (ns.AddOneNotice(n)) {
			request.getSession().setAttribute("noticeid", n.getNoticeid());
			return mapping.findForward(SUCCESS);
		} else {
			return mapping.findForward(DERROR);
		}
	}
}