/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dlpu.eva.struts.action;

import javax.persistence.Entity;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.dlpu.eva.global.Global;
import com.dlpu.eva.service.BulletinService;
import com.dlpu.eva.service.DatasystemService;
import com.dlpu.eva.service.DownfileService;
import com.dlpu.eva.service.EvaService;
import com.dlpu.eva.service.MaterialService;
import com.dlpu.eva.service.MyevaService;
import com.dlpu.eva.service.NewsService;
import com.dlpu.eva.service.NoticeService;
import com.dlpu.eva.service.PolicyService;
import com.dlpu.eva.service.QualityService;
import com.dlpu.eva.service.SchoolfileService;
import com.dlpu.eva.service.WorkService;

/**
 * MyEclipse Struts Creation date: 10-22-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action
 * @struts.action-forward name="fail" path="/administrator/reply.jsp?type=false"
 *                        redirect="true"
 * @struts.action-forward name="success"
 *                        path="/administrator/reply.jsp?type=true"
 *                        redirect="true"
 */
@Entity
public class DelAction extends Action {
	/*
	 * Generated Methods
	 */
	private static final String SUCCESS = "success";
	private static final String ERROR = "fail";

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		Object s = request.getSession().getAttribute("adminuser");
		if (s == null) {// ��ֹ����
			return mapping.findForward(ERROR);
		}

		String type = request.getParameter("type");
		String id = request.getParameter("id");
		if (type == null || id == null) {// ������󡢷�ֹ����������
			return mapping.findForward(ERROR);
		}

		if (type.equals(Global.T_NEWS)) {// ɾ������
			NewsService ns = new NewsService();
			if (ns.DelOneNews(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.T_NOTICE)) {// ɾ��֪ͨ
			NoticeService ns = new NoticeService();
			if (ns.DeleteOneNotice(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.T_POLICY)) {// ɾ�����߾���
			PolicyService ps = new PolicyService();
			if (ps.DelOnePolicy(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.T_QUA)) {// ɾ����������
			QualityService qs = new QualityService();
			if (qs.DelOneQua(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.T_SC_F)) {// ɾ��ѧУ�ļ�
			SchoolfileService ss = new SchoolfileService();
			if (ss.DelOneSchoolfile(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.T_EVA)) {// ɾ��רҵ����
			EvaService es = new EvaService();
			if (es.DelOneEva(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.L_BULLETIN)) {// ɾ��������
			BulletinService bs = new BulletinService();
			if (bs.DelOneBulletin(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.L_MYEVA)) {// ɾ����������
			MyevaService ms = new MyevaService();
			if (ms.DelOneMyeva(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.L_WORK)) {// ɾ��ר�ҹ���
			WorkService ws = new WorkService();
			if (ws.DelOneWork(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.L_DATASYSTEM)) {// ɾ���ѧ��״̬��ݿ�����
			DatasystemService ds = new DatasystemService();
			if (ds.DelOneDatasystem(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.L_DOWNFILE)) {// ɾ���ļ�����
			DownfileService dfs = new DownfileService();
			if (dfs.DelOneDownfile(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} else if (type.equals(Global.L_MATERIAL)) {// ɾ��֧�Ų���
			MaterialService ms = new MaterialService();
			if (ms.DelOneMaterial(id)) {
				return mapping.findForward(SUCCESS);
			} else {
				return mapping.findForward(ERROR);
			}
		} 

		return mapping.findForward(ERROR);
	}
}